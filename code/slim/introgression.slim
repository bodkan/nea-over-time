initialize() {
    initializeRecombinationRate($recomb_rates, $recomb_ends);
    initializeMutationRate($mut_rate);

    // deleterious mutation type
    initializeMutationType("m0", $dominance_coef, "g", -0.043, 0.23);

    // mutation type of neutral marker alleles at informative sites
    initializeMutationType("m1", 0.5, "f", 0.0);

    // mutation type of modified deleterious mutations
    initializeMutationType("m123", $dominance_coef, "f", 0.0);

    initializeGenomicElementType("g1", m0, 1.0);

    $genomic_elements

    // positions of the informative sites
    defineConstant("positions", $positions);

    // if sampling times are specified, output Nea. ancestry metrics only
    // at these generations
    if (size($sampling_times) > 0) {
        defineConstant("output_gen", unique($sampling_times + $admixture_time - 1));
    } else {
        defineConstant("output_gen", sort(unique(c(seq(1, 20) + $admixture_time - 1,
                                                   seq(100    + $admixture_time - 1, $sim_length, 100),
                                                   $sim_length))));
    }
    if (size($vcf_times) > 0) {
        defineConstant("vcf_gen", $vcf_times + $admixture_time - 1);
    } else {
        defineConstant("vcf_gen", c(-1));
    }

    defineConstant("simulate_dilution", $simulate_dilution);
    defineConstant("single_pulse", $admixture_time == $admixture_end);

    defineConstant("tmp_file", "tmp/tmp" + getSeed() + ".txt");
}

// load the simulation state after the out of Africa event
1 {
    cat(time() + " :: INFO :: Reading populations.\n");
    sim.readFromPopulationFile("$population_file");
    sim.recalculateFitness();
    sim.generation = 1;

    // delete the African population when not simulating dilution
    if (!simulate_dilution) {
        p1.setSubpopulationSize(0);
    }
}

// save the simulation state right before the admixture in case it is
// necessary to restart (makes sense just for the single pulse scenario)
$before_admixture late() {
    if ($neutral_sim) {
        del_muts = sim.mutations[sim.mutations.mutationType == m0];
        sapply(del_muts, "applyValue.setSelectionCoeff(0.0);");
    }

    if (single_pulse) {
        cat(time() + " :: INFO :: Saving the simulation state before the admixture\n");
        sim.outputFull(tmp_file);
    }
}

// Neanderthal admixture
$admixture_time {
    cat(time() + " :: INFO :: Starting the admixture.\n");
    p3.setMigrationRates(p2, $admixture_rate);
}

// make sure the simulated population received enough Neanderthal gene flow
// (makes sense just for the single pulse scenario)
$admixture_time late() {
    if (single_pulse) {

    mut_counts = p3.genomes.countOfMutationsOfType(m1);

    mean_nea = sum(mut_counts) / (2 * p3.individualCount) / size(positions);

    if (abs(mean_nea - $admixture_rate) > ($admixture_rate * 0.025)) {
        cat(time() + " :: INFO :: Simulated gene flow NOT accepted (" + mean_nea + ") - restarting.\n");
        sim.readFromPopulationFile(tmp_file);
        sim.generation = $before_admixture;
        setSeed(getSeed() + 1);
    } else {
        cat(time() + " :: INFO :: Simulated gene flow accepted (" + mean_nea + ") - continuing.\n");
        deleteFile(tmp_file);
    }

    }
}

// end the Neanderthal admixture by deleting the Neanderthal population
$after_admixture {
    cat(time() + " :: INFO :: Ending the admixture, removing Neanderthals.\n");
    p2.setSubpopulationSize(0);
}

// modify the DFE of Nea. introgressed mutations
$modify_at late() {
    muts = sim.mutations[sim.mutations.mutationType == $modify_what & sim.mutations.subpopID == 2];

    if ($modify_fraction) {
        mut_count = asInteger($modify_fraction * size(muts));
    } else if ($modify_count) {
        mut_count = $modify_count;
    } else {
        mut_count = 0;
    }
    mut_sample = sample(muts, mut_count);
    mut_sample.setMutationType(m123);

    // crank up s of selected Nea. fixed mutations
    if ($multiply_s) {
        sapply(mut_sample, "s = applyValue.selectionCoeff; applyValue.setSelectionCoeff(s * $modifier);");
    } else if ($fix_s) { // simulate fixed selective effect of Nea. mutations
        sapply(mut_sample, "applyValue.setSelectionCoeff($modifier);");
    }
}

// output Nea. ancestry trajectories calculated on informative sites
$admixture_time:$sim_length late() {
    output_file = "$output_prefix" + "_trajectory.txt";

    if (any(sim.generation == output_gen)) {
        cat(time() + " :: INFO :: " + sim.generation + "/$sim_length generations - calculating Nea%\n");
        nea_per_ind = sapply(seq(0, p3.individualCount - 1),
                            "sum(p3.genomes[c(2 * applyValue, 2 * applyValue + 1)].countOfMutationsOfType(m1));") / (2 * size(positions));

        if (sim.generation == $admixture_time)
            writeFile(output_file, "gen\tmean\tsd\tmedian\tmin\tmax\tNe");

            writeFile(output_file, paste(c(sim.generation - $admixture_time + 1,
                                           mean(nea_per_ind),
                                           sd(nea_per_ind),
                                           sort(nea_per_ind)[asInteger(size(nea_per_ind) / 2)],
                                           min(nea_per_ind),
                                           max(nea_per_ind),
                                           p3.individualCount), "\t"),
                      append=T);
  }
}

// save the VCF outputs at defined timepoints
$admixture_time:$sim_length late() {
    if (any(sim.generation == vcf_gen)) {
        path = "$output_prefix" + "_gen_" + asString(sim.generation - $admixture_time + 1) + ".vcf";
        p3.outputVCFSample($vcf_sample, outputMultiallelics=F, filePath=path);
        system("bgzip " + path);
    }
}

$terminate_after late() {
    sim.simulationFinished();
}
