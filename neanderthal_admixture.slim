// initialize the parameters of the simulated segment
initialize() {
    // total length of the simulated segment
    defineConstant("segment_length", $segment_length);

    // distance separating the fixed differences
    defineConstant("spacing", $spacing);

    // positions of deleterious and neutral Neanderthal loci
    defineConstant("neutral_pos", $neutral_pos);
}


// general simulation parameters
initialize() {
    initializeMutationRate(1e-8);
    initializeRecombinationRate(1e-8);
    
    // deleterious mutation type
    initializeMutationType("m0", $dominance_coef, "g", -0.043, 0.23);

    // mutation type of neutral markers
    initializeMutationType("m1", 0.5, "f", 0.0);
    m1.convertToSubstitution = F;

    initializeGenomicElementType("g1", m0, 1.0);
    initializeGenomicElement(g1, 0, segment_length - 1);
}


// create the ancestral human-Neanderthal population
1 {
    sim.addSubpop("p1", $afr_size);
}

// split between ancestors of modern humans from Neanderthals
// after a period of burnin
$burnin {
    sim.addSubpopSplit("p2", $nea_size, p1);
    p1.setSubpopulationSize($afr_size);
}

// place neutral markers on all Neanderthal haplotypes
$place_neutral late() {
    // extract the Neanderthal haplotypes
    nea_haps = p2.genomes;

    // place neutral markers on the first Neanderthal haplotype
    neutral_muts = apply(neutral_pos, "nea_haps[0].addNewDrawnMutation(m1, applyValue);");

    // copy the mutations to the remaining Neanderthal haplotypes
    nea_haps[1:(size(nea_haps) - 1)].addMutations(neutral_muts);

    cat("#OUT:");
}

// split non-Africans from Africans
$out_of_africa {
    sim.addSubpopSplit("p3", $founder_size, p1);
}

// start of Neanderthal admixture
$admixture_start {
    p3.setMigrationRates(p2, $admixture_rate);
}

// end of the Neanderthal admixture
$admixture_end {
    p3.setMigrationRates(p2, 0);
}

// extinction of Neanderthals
$admixture_end {
    p2.setSubpopulationSize(0);
}

// output frequencies of neutral mutations
$admixture_start:$sim_length {
    // print average Neanderthal ancestry in this generation
    cat("\t" + sum(p3.genomes.countOfMutationsOfType(m1)) / (2 * p3.individualCount) / $neutral_count);
}

// exponentially grow the European population
$eur_growth:$sim_length {
    t_i = sim.generation - $eur_growth;
    p3.setSubpopulationSize(asInteger($founder_size * exp(t_i * 0.0038)));
}
