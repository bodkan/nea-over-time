initialize() {
    // distance between the fixed neutral markers
    defineConstant("spacing", $spacing);

    // positions of the fixed neutral markers
    defineConstant("neutral_pos", $neutral_pos);
}


// load the simulation state after the out of Africa event
1 {
    sim.readFromPopulationFile("$population_file");
}


// place neutral markers on all Neanderthal haplotypes
1 {
    // extract the Neanderthal haplotypes
    nea_haps = p2.genomes;

    // place neutral markers on the first Neanderthal haplotype
    neutral_muts = apply(neutral_pos, "nea_haps[0].addNewDrawnMutation(m1, applyValue);");

    // copy the mutations to the remaining Neanderthal haplotypes
    nea_haps[1:(size(nea_haps) - 1)].addMutations(neutral_muts);
}


// start of the Neanderthal admixture
$admixture_start {
    p3.setMigrationRates(p2, $admixture_rate);

    cat("#OUT:");
}


// end of Neanderthal admixture
$admixture_end {
    p3.setMigrationRates(p2, 0);
}


// extinction of Neanderthals
$admixture_end {
    p2.setSubpopulationSize(0);
}


// exponentially grow the European population
$eur_growth:$sim_length {
    t_i = sim.generation - $eur_growth;
    p3.setSubpopulationSize(asInteger($founder_size * exp(t_i * 0.0038)));
}


// output frequencies of neutral mutations in each generation
$admixture_start:$sim_length {
    // print average Neanderthal ancestry in this generation
    cat("\t" + sum(p3.genomes.countOfMutationsOfType(m1)) / (2 * p3.individualCount) / $neutral_count);
}

